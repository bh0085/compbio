from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relation
from compbio.projects import cbdb
import os
import numpy as np
from Bio import SeqIO
from itertools import ifilter
class gbgenome():
  def get_tables(self):
    #by convention, store alignment files in dataPath/alignments.
    return [
            dict(name = 'Genome',
                 attrs={'id':Column(Integer, primary_key = True),
                        'name':Column(String),
                        'file_name':Column(String),
                        'file_offset':Column(Integer),
                        'sequence':Column(String),
                        'source_taxon':Column(Integer,index = True),
                        'source_organism':Column(String),
                        'gb_accession':Column(String),
                        'annotations':Column(String),
                        })
            ]
  def fill_db(self, name = 'bacterial_genomes', reset = True,
              postgres = True):
    dbi = cbdb.getName(name,
                       name = name,
                       postgres = postgres
                       tables = self.get_tables(),
                       reset = np.mod(reset, 2))


    paths = []
    for r,ds, fs in os.walk('/Volumes/My Book 2/all.gbk'):
      for f in fs:
        if 'gbk' in f: paths.append(os.path.join(r, f))
        count = 0 
    

    for p in paths:
      fopen = open(p)
      for rec in SeqIO.parse(fopen, 'genbank'):
        f0 = rec.features[0]
        if f0.type == 'source':
          source_taxon = f0.qualifiers['db_xref'][0][6:]
          source_organism=f0.qualifiers['organism'][0]
        else:
          source_taxon = None
          source_organism = None

        genome = dbi.Genome(name = rec.name, 
                           file_name = p,
                           file_offset = fopen.tell(),
                           sequence = rec.seq.__str__(),
                           source_taxon = source_taxon,
                           source_organism = source_organism,
                           gb_accession = rec.id,
                           annotations = rec.annotations.__str__())

        dbi.Session.add(genome)


        fs = rec.features
        d = {}
        types = {}
        for f in fs:
          qs = f.qualifiers
          for k in qs.keys():
            d[k] = d.get(k, 0) + 1
          types[f.type] = types.get(f.type, 0) + 1

        miscf = list(ifilter(lambda x: x.type == 'misc_feature', fs))
        sf_set = map(lambda x: x.sub_features, ifilter(lambda x: len(x.sub_features) > 0,miscf))
        from pprint import pprint as pp
        pp(d)
        pp(types)
        raw_input()
        continue
        raise Exception()



        if np.mod(count, 1000) == 0:
          print count, p , seq.source_organism
          dbi.Session.commit()
        count += 1
      dbi.Session.commit()
    
